class TimeWindowPlugin < CelltypePlugin
  @@api = {
    # "Kernel_Object_type" => [ クラス内かどうか、ドメイン内かどうか、オブジェクトタイプ略名、
    #                           静的API生成文字列]
    "SCY" =>
               [ :any, :Any, "SCY",
                 "DEF_SCY( {{scyc_time}} )" ],
    "SOM" =>
               [ :any, :Any, "SOM",
                 "CRE_SOM( {{somid}}, { {{somatr}}, {{next_somid}} })" ],
    "TWD" =>
               [ :InClass, :Any, "TWD",
                 "ATT_TWD( { {{domain_id}}, {{somid}} , {{twd_order}}, {{twd_length}}, {{flagPattern}} } )" ],
  }

    #celltype::     Celltype        セルタイプ（インスタンス）
  def initialize( celltype, option )
    super
    @celltype = celltype
    # @plugin_arg_str = option.gsub( /\A"(.*)/, '\1' )    # 前後の "" を取り除く
    # @plugin_arg_str.sub!( /(.*)"\z/, '\1' )
    @plugin_arg_str = CDLString.remove_dquote option
    @plugin_arg_list = {}
    @cell_list = []
  end

  #=== 新しいセル
  #cell::        Cell            セル
  #
  # celltype プラグインを指定されたセルタイプのセルが生成された
  # セルタイププラグインに対する新しいセルの報告
  def new_cell( cell )
    @cell_list << cell
    if @@api.has_key?(@plugin_arg_str) == false
      raise "#{@plugin_arg_str} is unknown"
    end

    # class check
    root = cell.get_owner.get_class_root
    if root then
      class_type = root.get_class_type
      if @@api[@plugin_arg_str][0] == :any then
        if class_type != nil then
          cdl_error2( cell.get_locale, "IPI9999 $1: out of class region", cell.get_name )
        end
      elsif @@api[@plugin_arg_str][0] == :InClass then
        if class_type == nil then
          cdl_error2( cell.get_locale, "IPI9999 $1: not in class region", cell.get_name )
        elsif class_type.get_option.to_s == "root" then
          cdl_error2( cell.get_locale, "IPI9999 $1: cannot be placed in out-of-class region", cell.get_name )
        end
      end
    else
      raise "root is nil"
    end

    # domain check
    root = cell.get_owner.get_domain_root
    if root then
      domain_type = root.get_domain_type
      if @@api[@plugin_arg_str][1] == :Any then
        if domain_type != nil then
          cdl_error2( cell.get_locale, "IPI9999 $1: not in domain region", cell.get_name )
        end
      elsif @@api[@plugin_arg_str][1] == :InDomain then
        if domain_type.get_option == "OutOfDomain" then
          cdl_error2( cell.get_locale, "IPI9999 $1: not place out of domain region", cell.get_name )
        end
      elsif @@api[@plugin_arg_str][1] == :Kernel then
        if domain_type.get_option != "kernel" then
          cdl_error2( cell.get_locale, "IPI9999 $1: not place out of kernel domain region", cell.get_name )
        end
      end
    else
      raise "root is nil"
    end
  end

  #=== IPIPlugin#print_cfg_int
  # APIの出力
  # file:: FILE:     出力先ファイル
  # indent :: string:   インデント用のtab
  def print_api(file, cell, indent)
    # p "print_cfg_cre: #{cell.get_name} #{@plugin_arg_str}"
    if @@api.has_key?(@plugin_arg_str) == false
      raise "#{@plugin_arg_str} is unknown"
    else
      cfg_str = @@api[@plugin_arg_str][3]
      file.print indent
    end

    celltype   = cell.get_celltype
    name_array = celltype.get_name_array cell

    # {{attribute}} の置換
    cfg_str2 = cfg_str.gsub(/\{\{([a-zA-Z0-9_]*?)\}\}/) { |match|
      # p "match: #{match}"
      name = $1.to_sym
      get_attr_var_val( cell, name_array, name )
    }

    file.print cfg_str2, ";\n"
  end

  def get_attr_var_val cell, name_array, attr
    celltype = cell.get_celltype
    str =  celltype.get_cell_attr_var_init_str( cell, name_array, attr )
    return celltype.subst_name( str, name_array )
  end

  #=== tCelltype_factory.h に挿入するコードを生成する
  # file 以外の他のファイルにファクトリコードを生成してもよい
  # セルタイププラグインが指定されたセルタイプのみ呼び出される
  def gen_factory file
    f = AppFile.open( "#{$gen}/tecsgen.cfg" )
    f.print "/* generated by IPIPlugin */\n"
    option_prev = nil
    @cell_list.each{ |cell|
      region = cell.get_owner
      croot  = region.get_class_root
      class_type = croot.get_class_type
      coption = class_type.get_plugin.get_PU_kernel_class

      droot   = region.get_domain_root
      domain_type = droot.get_domain_type
      doption = domain_type.get_option

      indent = ""
      if doption == "kernel" then
        f.print "KERNEL_DOMAIN{\n"
        indent = "  "
      else
        raise "put in KERNEL_DOMAIN"
      end
      dbgPrint "IPIPlugin: cell=#{cell.get_name} celltype=#{cell.get_celltype.get_name} coption=#{coption}\n"
      indent2 = indent
      if coption != "root" then
        f.print "#{indent}CLASS(#{coption}){\n"
        indent2 = indent + "  "
      end
      print_api f, cell, indent2

      if coption != "root" then
        f.print "#{indent}}\n"
      end
      if doption != "OutOfDomain" then
        f.print "}\n"
      end
    }
    f.close
  end

end
