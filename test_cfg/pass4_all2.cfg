/*
 *		全静的APIのパス4でのエラー検出のテスト(2)
 *
 *  $Id: pass4_all2.cfg 1060 2023-01-08 13:38:16Z ertl-hiro $
 */

#include "cfg_common.h"

//  == target_mem.cfg ==
//  ATT_REG("ROM", { TA_NOWRITE, 0x01000000, 0x00800000 });
//  ATT_REG("RAM", { TA_NULL, 0x01800000, 0x00800000 });
//  DEF_SRG("ROM", "RAM");

ATT_REG("RAM2", { TA_NULL, 0x02800000, 0x00800000 });

DOMAIN(DOM1) {
  CLASS(CLS_PRC1) {
	/* 生成するタスクがユーザタスクで，sstkにターゲット定義の制約に合 */
	/* 致しない先頭番地を指定した時［NGKI1065］*/
	CRE_TSK(TASK1, { TA_NULL, 1, task1, HIGH_PRIORITY,
						STACK_SIZE, NULL, STACK_SIZE, ADD1(stack_TASK1) });
	CRE_TSK(TASK2, { TA_NULL, 2, task2, HIGH_PRIORITY, 
										STACK_SIZE, NULL, STACK_SIZE, 0 });

	/* 生成するタスクがユーザタスクで，stkとstkszで指定したスタック */
	/* 領域が，登録済みのメモリオブジェクトとメモリ領域が重なる場合 */
	/*［NGKI1060］*/
	CRE_TSK(TASK3, { TA_NULL, 3, task3, MID_PRIORITY,
										STACK_SIZE, stack_TASK3 });

	/* 生成するタスクがユーザタスクで，sstkとsstkszで指定したシステム */
	/* スタック領域がカーネル専用のメモリオブジェクトに含まれない場合 */
	/*［NGKI1066］*/
	CRE_TSK(TASK4, { TA_NULL, 4, task4, MID_PRIORITY,
						STACK_SIZE, NULL, STACK_SIZE, stack_TASK4 });

	/* 指定した固定長メモリプール領域が，カーネルに登録されたメモリオ */
	/* ブジェクトに含まれていない場合［NGKI2251］*/
	CRE_MPF(MPF1, { TA_NULL, 10, 100, 0xc0000000, NULL });

	/* 対象タスクに対する通常操作1が許可されていない［NGKI3705］*/
	CRE_CYC(CYC1, { TA_NULL, { TNFY_ACTTSK, TASK6 }, 1000, 1000 });
	CRE_CYC(CYC2, { TA_NULL, { TNFY_WUPTSK, TASK6 }, 1000, 1000 });
	CRE_CYC(CYC3, { TA_NULL, { TNFY_ACTTSK|TENFY_ACTTSK, TASK1, TASK6 },
														1000, 1000 });
	CRE_CYC(CYC4, { TA_NULL, { TNFY_ACTTSK|TENFY_WUPTSK, TASK1, TASK6 },
														1000, 1000 });

	/* 対象セマフォに対する通常操作1が許可されていない［NGKI3708］*/
	CRE_CYC(CYC5, { TA_NULL, { TNFY_SIGSEM, SEM1 }, 1000, 1000 });
	CRE_CYC(CYC6, { TA_NULL, { TNFY_ACTTSK|TENFY_SIGSEM, TASK1, SEM1 },
														1000, 1000 });

	/* 対象イベントフラグに対する通常操作1が許可されていない［NGKI3711］*/
	CRE_CYC(CYC7, { TA_NULL, { TNFY_SETFLG, FLG1, 0x01U }, 1000, 1000 });
	CRE_CYC(CYC8, { TA_NULL, { TNFY_ACTTSK|TENFY_SETFLG, TASK1,
											FLG1, 0x01U }, 1000, 1000 });

	/* 対象データキューに対する通常操作1が許可されていない［NGKI3716］*/
	CRE_CYC(CYC9, { TA_NULL, { TNFY_SNDDTQ, DTQ1, 0x00 }, 1000, 1000 });
	CRE_CYC(CYC10, { TA_NULL, { TNFY_ACTTSK|TENFY_SNDDTQ, TASK1, DTQ1 },
														1000, 1000 });

	/* 指定した変数に対する書込みアクセスが許可されていない［NGKI3702］*/
	CRE_CYC(CYC11, { TA_NULL, { TNFY_SETVAR, &nvar3, 1 }, 1000, 1000 });
	CRE_CYC(CYC12, { TA_NULL, { TNFY_ACTTSK|TENFY_SETVAR,
											TASK1, &nvar3 }, 1000, 1000 });
	CRE_CYC(CYC13, { TA_NULL, { TNFY_SETVAR, &nvar4, 1 }, 1000, 1000 });
	CRE_CYC(CYC14, { TA_NULL, { TNFY_ACTTSK|TENFY_SETVAR,
											TASK1, &nvar4 }, 1000, 1000 });
	CRE_CYC(CYC15, { TA_NULL, { TNFY_SETVAR, &nvar5, 1 }, 1000, 1000 });
	CRE_CYC(CYC16, { TA_NULL, { TNFY_ACTTSK|TENFY_SETVAR,
											TASK1, &nvar5 }, 1000, 1000 });
	CRE_CYC(CYC17, { TA_NULL, { TNFY_SETVAR, &nvar6, 1 }, 1000, 1000 });
	CRE_CYC(CYC18, { TA_NULL, { TNFY_ACTTSK|TENFY_SETVAR,
											TASK1, &nvar6 }, 1000, 1000 });

	/* 指定した変数に対する書込みアクセスおよび読出しアクセスが許可さ */
	/* れていない［NGKI3898］*/
	CRE_CYC(CYC19, { TA_NULL, { TNFY_INCVAR, &nvar3 }, 1000, 1000 });
	CRE_CYC(CYC20, { TA_NULL, { TNFY_ACTTSK|TENFY_INCVAR,
											TASK1, &nvar3 }, 1000, 1000 });
	CRE_CYC(CYC21, { TA_NULL, { TNFY_INCVAR, &nvar4 }, 1000, 1000 });
	CRE_CYC(CYC22, { TA_NULL, { TNFY_ACTTSK|TENFY_INCVAR,
											TASK1, &nvar4 }, 1000, 1000 });
	CRE_CYC(CYC23, { TA_NULL, { TNFY_INCVAR, &nvar5 }, 1000, 1000 });
	CRE_CYC(CYC24, { TA_NULL, { TNFY_ACTTSK|TENFY_INCVAR,
											TASK1, &nvar5 }, 1000, 1000 });
	CRE_CYC(CYC25, { TA_NULL, { TNFY_INCVAR, &nvar6 }, 1000, 1000 });
	CRE_CYC(CYC26, { TA_NULL, { TNFY_ACTTSK|TENFY_INCVAR,
											TASK1, &nvar6 }, 1000, 1000 });

	/* 対象タスクに対する通常操作1が許可されていない［NGKI3705］*/
	CRE_ALM(ALM1, { TA_NULL, { TNFY_ACTTSK, TASK6 }});
	CRE_ALM(ALM2, { TA_NULL, { TNFY_WUPTSK, TASK6 }});
	CRE_ALM(ALM3, { TA_NULL, { TNFY_ACTTSK|TENFY_ACTTSK, TASK1, TASK6 }});
	CRE_ALM(ALM4, { TA_NULL, { TNFY_ACTTSK|TENFY_WUPTSK, TASK1, TASK6 }});

	/* 対象セマフォに対する通常操作1が許可されていない［NGKI3708］*/
	CRE_ALM(ALM5, { TA_NULL, { TNFY_SIGSEM, SEM1 }});
	CRE_ALM(ALM6, { TA_NULL, { TNFY_ACTTSK|TENFY_SIGSEM, TASK1, SEM1 }});

	/* 対象イベントフラグに対する通常操作1が許可されていない［NGKI3711］*/
	CRE_ALM(ALM7, { TA_NULL, { TNFY_SETFLG, FLG1, 0x01U }});
	CRE_ALM(ALM8, { TA_NULL, { TNFY_ACTTSK|TENFY_SETFLG, TASK1,
														FLG1, 0x01U }});

	/* 対象データキューに対する通常操作1が許可されていない［NGKI3716］*/
	CRE_ALM(ALM9, { TA_NULL, { TNFY_SNDDTQ, DTQ1, 0x00 }});
	CRE_ALM(ALM10, { TA_NULL, { TNFY_ACTTSK|TENFY_SNDDTQ, TASK1, DTQ1 }});

	/* 指定した変数に対する書込みアクセスが許可されていない［NGKI3702］*/
	CRE_ALM(ALM11, { TA_NULL, { TNFY_SETVAR, &nvar3, 1 }});
	CRE_ALM(ALM12, { TA_NULL, { TNFY_ACTTSK|TENFY_SETVAR,
													TASK1, &nvar3 }});
	CRE_ALM(ALM13, { TA_NULL, { TNFY_SETVAR, &nvar4, 1 }});
	CRE_ALM(ALM14, { TA_NULL, { TNFY_ACTTSK|TENFY_SETVAR,
													TASK1, &nvar4 }});
	CRE_ALM(ALM15, { TA_NULL, { TNFY_SETVAR, &nvar5, 1 }});
	CRE_ALM(ALM16, { TA_NULL, { TNFY_ACTTSK|TENFY_SETVAR,
													TASK1, &nvar5 }});
	CRE_ALM(ALM17, { TA_NULL, { TNFY_SETVAR, &nvar6, 1 }});
	CRE_ALM(ALM18, { TA_NULL, { TNFY_ACTTSK|TENFY_SETVAR,
													TASK1, &nvar6 }});

	/* 指定した変数に対する書込みアクセスおよび読出しアクセスが許可さ */
	/* れていない［NGKI3898］*/
	CRE_ALM(ALM19, { TA_NULL, { TNFY_INCVAR, &nvar3 }});
	CRE_ALM(ALM20, { TA_NULL, { TNFY_ACTTSK|TENFY_INCVAR,
													TASK1, &nvar3 }});
	CRE_ALM(ALM21, { TA_NULL, { TNFY_INCVAR, &nvar4 }});
	CRE_ALM(ALM22, { TA_NULL, { TNFY_ACTTSK|TENFY_INCVAR,
													TASK1, &nvar4 }});
	CRE_ALM(ALM23, { TA_NULL, { TNFY_INCVAR, &nvar5 }});
	CRE_ALM(ALM24, { TA_NULL, { TNFY_ACTTSK|TENFY_INCVAR,
													TASK1, &nvar5 }});
	CRE_ALM(ALM25, { TA_NULL, { TNFY_INCVAR, &nvar6 }});
	CRE_ALM(ALM26, { TA_NULL, { TNFY_ACTTSK|TENFY_INCVAR,
													TASK1, &nvar6 }});
  }
}

KERNEL_DOMAIN {
  CLASS(CLS_PRC1) {
	/* 生成するタスクがシステムタスクで，stkとstkszで指定したスタッ */
	/* ク領域がカーネル専用のメモリオブジェクトに含まれない場合 */
	/*［NGKI1057］*/
	CRE_TSK(TASK5, { TA_NULL, 5, task5, MID_PRIORITY,
										STACK_SIZE, stack_TASK5 });

	/* istkとistkszで指定した非タスクコンテキスト用のスタック領域がカー */
	/* ネル専用のメモリオブジェクトに含まれない場合［NGKI3223］*/
	DEF_ICS({ 10 * STACK_SIZE, istack });

	/* エラーにならない静的API */
	CRE_TSK(TASK6, { TA_NULL, 6, task6, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_SEM(SEM1, { TA_NULL, 1, 1 });
	CRE_FLG(FLG1, { TA_NULL, 0x00U });
	CRE_DTQ(DTQ1, { TA_NULL, 10, NULL });
  }

  /* extsvcがプログラムの先頭番地として正しくない［NGKI3175］*/
  DEF_SVC(1, { TA_NULL, ADD1(extended_svc1), 100 });
  DEF_SVC(2, { TA_NULL, 0, 100 });
}

/* 登録しようとしたメモリオブジェクトが，登録済みのメモリオブジェクト */
/* とメモリ領域が重なる場合［NGKI2882］*/
ATT_MEM({ TA_NULL, 0x01000000, 0x00001000 });

/* baseやsizeに，ターゲット定義の制約に合致しない先頭番地やサイズを */
/* 指定した時（base+sizeがアドレスの上限を超える場合）［NGKI2880］*/
ATT_MEM({ TA_NULL, 0xff000000, 0x2000000 });

/* 登録しようとしたメモリオブジェクトが，登録済みのメモリオブジェクト */
/* と論理アドレス空間においてメモリ領域が重なる場合［NGKI2902］*/
ATT_PMA({ TA_NULL, 0x01800000, 0x00001000, 0xf0000000 });

/* エラーにならない静的API */
ATT_PMA({ TA_NULL, 0xf0000000, 0x00001000, 0x01008000 });

DEF_SCY({ 10000 });

/* nxtsomが不正［NGKI5024］*/
CRE_SOM(SOM1, { TA_INISOM, 0 });

CLASS(CLS_PRC1) {
	/* タスクIDが有効範囲外［NGKI3704］*/
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK, TSKID_LARGE }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_WUPTSK, TSKID_LARGE }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_ACTTSK,
												TASK1, TSKID_LARGE }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_WUPTSK,
												TASK1, TSKID_LARGE }});

	/* セマフォIDが有効範囲外［NGKI3707］*/
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_SIGSEM, SEMID_LARGE }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_SIGSEM,
												TASK1, SEMID_LARGE }});

	/* イベントフラグIDが有効範囲外［NGKI3710］*/
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_SETFLG, FLGID_LARGE, 0x01U }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_SETFLG, TASK1,
												 FLGID_LARGE, 0x01U }});

	/* データキューIDが有効範囲外［NGKI3713］*/
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_SNDDTQ, DTQID_LARGE, 0x00 }});
	/* データキューIDが有効範囲外［NGKI3715］*/
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_SNDDTQ,
												TASK1, DTQID_LARGE }});

	/* 変数の番地が正しくない［NGKI3699］*/
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_SETVAR, ADD1(&nvar1), 1 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_SETVAR, 0, 1 }});

	/* 変数の番地が正しくない［NGKI3701］*/
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_SETVAR,
													TASK1, ADD1(&nvar1) }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_SETVAR, TASK1, 0 }});

	/* 変数の番地が正しくない［NGKI3897］*/
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_INCVAR, ADD1(&nvar2) }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_INCVAR, 0 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_INCVAR,
													TASK1, ADD1(&nvar2) }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_INCVAR, TASK1, 0 }});

	/* 対象タスクに対する通常操作1が許可されていない［NGKI3705］*/
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK, TASK6 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_WUPTSK, TASK6 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_ACTTSK, TASK1, TASK6 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_WUPTSK, TASK1, TASK6 }});

	/* 対象セマフォに対する通常操作1が許可されていない［NGKI3708］*/
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_SIGSEM, SEM1 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_SIGSEM, TASK1, SEM1 }});

	/* 対象イベントフラグに対する通常操作1が許可されていない［NGKI3711］*/
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_SETFLG, FLG1, 0x01U }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_SETFLG, TASK1,
														FLG1, 0x01U }});

	/* 対象データキューに対する通常操作1が許可されていない［NGKI3716］*/
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_SNDDTQ, DTQ1, 0x00 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_SNDDTQ, TASK1, DTQ1 }});

	/* 指定した変数に対する書込みアクセスが許可されていない［NGKI3702］*/
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_SETVAR, &nvar3, 1 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_SETVAR,
													TASK1, &nvar3 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_SETVAR, &nvar4, 1 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_SETVAR,
													TASK1, &nvar4 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_SETVAR, &nvar5, 1 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_SETVAR,
													TASK1, &nvar5 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_SETVAR, &nvar6, 1 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_SETVAR,
													TASK1, &nvar6 }});

	/* 指定した変数に対する書込みアクセスおよび読出しアクセスが許可さ */
	/* れていない［NGKI3898］*/
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_INCVAR, &nvar3 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_INCVAR,
													TASK1, &nvar3 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_INCVAR, &nvar4 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_INCVAR,
													TASK1, &nvar4 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_INCVAR, &nvar5 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_INCVAR,
													TASK1, &nvar5 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_INCVAR, &nvar6 }});
	ATT_TWD({ DOM1, SOM1, 1, 100, { TNFY_ACTTSK|TENFY_INCVAR,
													TASK1, &nvar6 }});
}

ATT_MOD("pass4_all2.o");
ATT_SEC(".bss_shared_add1", { TA_BSSSEC|TA_NOREAD, "RAM" },
				{ TACP_SHARED, TACP_SHARED, TACP_KERNEL, TACP_KERNEL });
ATT_SEC(".bss_shared_add2", { TA_BSSSEC, "RAM" },
				{ TACP_KERNEL, TACP_SHARED, TACP_KERNEL, TACP_KERNEL });
ATT_SEC(".bss_shared_add3", { TA_BSSSEC, "RAM" },
				{ TACP_SHARED, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });
ATT_MOD("libc.a");
