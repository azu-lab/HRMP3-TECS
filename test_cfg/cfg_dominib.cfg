/*
 *		USE_LATERPASS_DOMINIBを用いる場合のテスト
 *
 *  $Id: cfg_dominib.cfg 1005 2022-11-24 06:18:14Z ertl-hiro $
 */

#include "cfg_common.h"

//	== target_mem.cfg ==
//	ATT_REG("ROM", { TA_NOWRITE, 0x01000000, 0x00800000 });
//	ATT_REG("RAM", { TA_NULL, 0x01800000, 0x00800000 });
//	DEF_SRG("ROM", "RAM");
//
//	== target_timer.cfg ==
//	4つのプロセッサに対して，高分解能タイマドライバとタイムウィンドウ
//	タイマドライバのための，初期化ルーチン，終了処理ルーチン，割込みハ
//	ンドラの登録を行う．
//
//	== target_ipi.cfg ==
//	4つのプロセッサに対して，ディスパッチ要求，カーネル終了要求，高分
//	解能タイマ設定要求，システム周期開始要求の各プロセッサ間割込みの登
//	録を行う．

KERNEL_DOMAIN {
  CLASS(CLS_PRC1) {
	CRE_TSK(TASK1, { TA_ACT, 1, task1, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_ALM(ALM1, { TA_NULL, { TNFY_ACTTSK, TASK1 }});
  }
  CLASS(CLS_PRC2) {
	CRE_TSK(TASK2, { TA_ACT, 2, task2, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_ALM(ALM2, { TA_NULL, { TNFY_ACTTSK, TASK2 }});
  }
}

DOMAIN(DOM1) {
  CLASS(CLS_PRC1) {
	CRE_TSK(TASK3, { TA_ACT, 3, task3, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_ALM(ALM3, { TA_NULL, { TNFY_ACTTSK, TASK3 }});
  }
  CLASS(CLS_PRC2) {
	CRE_TSK(TASK4, { TA_ACT, 4, task4, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_ALM(ALM4, { TA_NULL, { TNFY_ACTTSK, TASK4 }});
  }
}

DOMAIN(DOM2) {
}

DOMAIN(DOM3) {
  CLASS(CLS_PRC1) {
	CRE_TSK(TASK5, { TA_ACT, 5, task5, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_ALM(ALM5, { TA_NULL, { TNFY_ACTTSK, TASK5 }});
  }
  CLASS(CLS_PRC2) {
	CRE_TSK(TASK6, { TA_ACT, 6, task6, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_ALM(ALM6, { TA_NULL, { TNFY_ACTTSK, TASK6 }});
  }
}

DEF_SCY({ 10000 });
CRE_SOM(SOM1, { TA_INISOM, SOM1 });
CLASS(CLS_PRC1) {
	ATT_TWD({ DOM1, SOM1, 1, 4000 });
	ATT_TWD({ DOM2, SOM1, 2, 4000 });
}
CLASS(CLS_PRC2) {
	ATT_TWD({ DOM1, SOM1, 1, 4000 });
	ATT_TWD({ DOM2, SOM1, 2, 4000 });
}
ATT_MOD("cfg_dominib.o");
ATT_MOD("libc.a");
